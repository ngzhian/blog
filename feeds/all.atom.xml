<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Zhi An</title><link href="http://ngzhian.com/blog/" rel="alternate"></link><link href="http://ngzhian.com/blog/feeds/all.atom.xml" rel="self"></link><id>http://ngzhian.com/blog/</id><updated>2015-05-25T14:00:00-04:00</updated><entry><title>Lexing COOL - Coursera Compilers Course Assignment 1</title><link href="http://ngzhian.com/blog/lexing-cool-coursera-compilers-course-assignment-1.html" rel="alternate"></link><updated>2015-05-25T14:00:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-05-25:blog/lexing-cool-coursera-compilers-course-assignment-1.html</id><summary type="html">&lt;p&gt;This post is about Assignment 1 on on the &lt;a href="https://www.coursera.org/course/compilers"&gt;Coursera Compilers course&lt;/a&gt;, which is to write a flex specification for lexing COOL.&lt;/p&gt;
&lt;p&gt;This was pretty challenging for me, I took about 4 hours in total, spread over a couple of nights to complete this.&lt;/p&gt;
&lt;p&gt;The challenging part was handling edge cases, and thinking about how the lexer will match strings. For example, because the lexer matches greedily, an over-optimistic regex will cause group that you won't think of capturing to be captured.&lt;/p&gt;
&lt;p&gt;The really helpful part was running the grading script, and checking the differences between the reference lexer and my lexer. This allowed me to drill down to specific portions of my regex or code, such as areas I should be increasing the line count.&lt;/p&gt;
&lt;p&gt;Matching operators and keywords are not difficult, the most tedious part was matching multiline nested comments and also string constants.&lt;/p&gt;
&lt;p&gt;To match nested comments, for every "&lt;em&gt;)" matched, we need to determine if this is matching a opening "(&lt;/em&gt;", or if it is a stray closing comment and hence an error. This can be done using a start condition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;(*&amp;quot; { BEGIN(comment);}
&amp;lt;comment&amp;gt;&amp;quot;*)&amp;quot; {}
&amp;quot;*)&amp;quot; { return ERROR; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last rule for matching "*)" feels pretty unintuitive, but it works!&lt;/p&gt;
&lt;p&gt;Matching string constants is even more complicated. We need to handle all the valid escaped sequences, &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\f&lt;/code&gt;, &lt;code&gt;\"&lt;/code&gt;, transform non escaped sequences with a slash into it's normal counter part, e.g. &lt;code&gt;\a&lt;/code&gt; will be transformed into &lt;code&gt;a&lt;/code&gt;. Also, &lt;code&gt;null&lt;/code&gt; characters are illegal within string constants, the same for &lt;code&gt;EOF&lt;/code&gt;. And any new lines need to be escaped first. It becomes unobvious how to match certain sequences, for example, how do you match a new line in a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;str&amp;gt;\n { return ERROR; }
&amp;lt;str&amp;gt;\\n { /* matches a slash followed by a &amp;#39;n&amp;#39; in the input */ }
&amp;lt;str&amp;gt;\\\n { /* matches a slash followed by a new line character */ }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line matches a new line while reading a string constant. The second line is a slash followed by a character 'n'. Finally, the third line matches an escaped new line. &lt;code&gt;\\&lt;/code&gt; is an escaped &lt;code&gt;\&lt;/code&gt;, and hence matches a literal &lt;code&gt;\&lt;/code&gt; within the input, followed by &lt;code&gt;\n&lt;/code&gt;, which matches a new line character.&lt;/p&gt;
&lt;p&gt;Here's other tips that may come in helpful:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curr_lineno&lt;/code&gt; indicates the current line in the source file, this needs to be updated in multiple places, for example, in string constants, in comments, in general source code definition.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yyinput()&lt;/code&gt; reads one character from the stream&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;&lt;/code&gt; matches EOF, this is useful when scanning for string constants as an EOF while in string is an error. However &lt;code&gt;&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;&lt;/code&gt; only works on the pattern, as in &lt;code&gt;&amp;lt;str&amp;gt;&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;&lt;/code&gt;, when in the &lt;code&gt;&amp;lt;str&amp;gt;&lt;/code&gt; context.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;p&gt;A quick introductin to flex:
&lt;a href="http://dinosaur.compilertools.net/lex/index.html"&gt;http://dinosaur.compilertools.net/lex/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good sample lex file for ANSI C grammar:
&lt;a href="http://www.lysator.liu.se/c/ANSI-C-grammar-l.html#count"&gt;http://www.lysator.liu.se/c/ANSI-C-grammar-l.html#count&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to match EOF:
&lt;a href="http://flex.sourceforge.net/manual/EOF.html"&gt;http://flex.sourceforge.net/manual/EOF.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Might be helpful, flex description for C/C++ scanner:
&lt;a href="http://scottmcpeak.com/elkhound/sources/elsa/cc.lex"&gt;http://scottmcpeak.com/elkhound/sources/elsa/cc.lex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The coursera forums are helpful as well.&lt;/p&gt;</summary></entry><entry><title>ffmpeg to make gifs</title><link href="http://ngzhian.com/blog/ffmpeg-to-make-gifs.html" rel="alternate"></link><updated>2015-05-17T09:30:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-05-17:blog/ffmpeg-to-make-gifs.html</id><summary type="html">&lt;p&gt;Over the weekend I was working on a little hack called &lt;a href="https://github.com/ngzhian/help-me-man/"&gt;Help me man!&lt;/a&gt;, which is a way for looking up arguments meaning from the man page while you are typing a command, and I wanted to make a gif demo. It was easy making a screencast, Camstudio was a free and easy way to record a particular window, the problem is converting it into a gif.&lt;/p&gt;
&lt;p&gt;I've heard quite a bit about &lt;code&gt;ffmpeg&lt;/code&gt; as a swiss army knife for manipulating videos, so I decided to try it out.&lt;/p&gt;
&lt;p&gt;ffmpeg can be downloaded from its &lt;a href="http://ffmpeg.org/"&gt;homepage&lt;/a&gt;, and the documentation is available &lt;a href="http://ffmpeg.org/ffmpeg.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I couldn't find a package for it on Ubuntu, so I downloaded the binary file and it ran fine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are so many command line parameters available that it can be daunting to use this tool. But since my use cases were pretty common, a quick search online turned out the right commands to run.&lt;/p&gt;
&lt;p&gt;The simplest command here is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This converts a video file to a gif. The &lt;code&gt;-i&lt;/code&gt; parameter specifies the input file, and the last argument is the name of the output file. &lt;code&gt;ffmpeg&lt;/code&gt; will look at the name of the output file and determine what is the type of the file it will write to.&lt;/p&gt;
&lt;p&gt;However, the gif turned out to be too huge.&lt;/p&gt;
&lt;p&gt;One way to reduce the size of the gif is to reduce the screen resolution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 -vf &lt;span class="nv"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;320x260 demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-vf&lt;/code&gt; argument takes a scale in the format of &lt;code&gt;WIDTHxHEIGHT&lt;/code&gt;. This requires us to calculate both the height and width of the output we want, but there is a better way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 -vf &lt;span class="nv"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;320:-1 demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By writing &lt;code&gt;:-1&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt; will automatically scale the video to fit!&lt;/p&gt;
&lt;p&gt;We can also crop the video using ffmpeg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 -ss 00:00:04 demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-ss&lt;/code&gt; paramter specifies the time you want the video to crop to.&lt;/p&gt;
&lt;p&gt;To specify the end time, there are a couple of ways&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 -ss &lt;span class="m"&gt;4&lt;/span&gt; -t &lt;span class="m"&gt;10&lt;/span&gt; demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that you can specify the number of seconds as well, so you don't have to keep typing &lt;code&gt;00:00:04&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-t&lt;/code&gt; paramter specifics the duration of the video to run, so in the above example, we start from 4 seconds into the video, and run for 10 seconds. Our resulting gif is then 10 seconds long.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4 -ss &lt;span class="m"&gt;4&lt;/span&gt; -to &lt;span class="m"&gt;10&lt;/span&gt; demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you instead use &lt;code&gt;-to&lt;/code&gt;, it will seek to 4 seconds and stop at 10 seconds, the resulting gif is then 6 seconds (10 - 4) long.&lt;/p&gt;
&lt;p&gt;The last thing I did to reduce the file size was to reduce the frame rate of the resulting video.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4  -r &lt;span class="m"&gt;6&lt;/span&gt; demo.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-r&lt;/code&gt; parameter specifies the frame rate of the output file, in this case we set the output frame rate to 6 frames per second.&lt;/p&gt;
&lt;p&gt;One last helpful thing, if you call &lt;code&gt;ffmpeg&lt;/code&gt; without an output file name, it will print out the info of the input file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ffmpeg -i demo.mp4
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Common problems I faced with Vagrant and VirtualBox</title><link href="http://ngzhian.com/blog/common-problems-i-faced-with-vagrant-and-virtualbox.html" rel="alternate"></link><updated>2015-05-08T19:00:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-05-08:blog/common-problems-i-faced-with-vagrant-and-virtualbox.html</id><summary type="html">&lt;p&gt;Sometimes I have a little bit of trouble getting my development setup to work properly.&lt;/p&gt;
&lt;p&gt;My laptop runs Windows 8.1 64bit, and I do my development in a Vagrant environment with a VirtualBox provider.
I really like this setup, until it craps on me. This post documents some commone error I face and what I did to fix (or maybe not fix) it.&lt;/p&gt;
&lt;h2&gt;Vagrant lost my old development environment omgomgomg!&lt;/h2&gt;
&lt;p&gt;Vagrant uses the UUID of a VirtualBox managed box to identify which vagrant environment is tied to which VirtualBox.
Vagrant stores this UUID in a file called &lt;code&gt;id&lt;/code&gt; and this file is located in the &lt;code&gt;.vagrant&lt;/code&gt; directory which is located beside the &lt;code&gt;Vagrantfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Specifically for me, it is located&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;|-- .vagrant
 |-- machines
  |-- default
   |-- virtualbox
    |-- id
|-- Vagrantfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your layout may look different depending on your &lt;code&gt;Vagrantfile&lt;/code&gt; config.&lt;/p&gt;
&lt;p&gt;Usually, when the &lt;code&gt;id&lt;/code&gt; file is messed up, either its contents has been corrupted or the file deleted, Vagrant will be unable to find the VirtualBox that is backing this.&lt;/p&gt;
&lt;p&gt;The fix is simple, create the &lt;code&gt;id&lt;/code&gt; file in the place that it should be located (and this isn't difficult to find because those directories will not be removed even if the file was deleted), with the contents being the UUID of the original VirtualBox. The trouble is finding the UUID.&lt;/p&gt;
&lt;p&gt;You will not be able to find the UUID from the VirtualBox GUI. I found the best way to find the UUID is through the &lt;code&gt;VBoxManage&lt;/code&gt; command that comes with the VirtualBox installation. Here's how (in powershell):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PS&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;ZhiAn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:\Program Files\Oracle\VirtualBox\VBoxManage.exe&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;vms&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;stuff-dev_default_1430843699366_68732&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;4ba4dec6&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;7f96&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;4185-bf64&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;97bb6334c090&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;morestuff_default_1430602346381_75524&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;3eb30515&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;6eac&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;472c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;87bd&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;9abc3503031b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;yetmorestuff_default_1430751792081_54559&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e35079c1&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;387e&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;4bbe-ac0e&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;47ce139fee7d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The UUID is the string within the curly braces &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;I upgraded VirtualBox and it lost all my VMs, HELP!!!&lt;/h2&gt;
&lt;p&gt;I encountered this problem because (I think):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I created those VirtualBox boxes via vagrant while in cygwin drive, e.g. &lt;code&gt;C:\cygwin\home\ZhiAn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vagrant created a folder called &lt;code&gt;VirtualBox VMs&lt;/code&gt; inside &lt;code&gt;~&lt;/code&gt;, which in the cygwin drive meant &lt;code&gt;C:\cygwin\home\ZhiAn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I upgraded my VirtualBox in host machine, and it registered all the VMs that were in &lt;code&gt;~&lt;/code&gt;, which meant &lt;code&gt;C:\Users\ZhiAn\VirtualBox VMs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Poof, old boxes gone!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This isn't too difficult to solve, we just had to register those VMs that lived inside cygwin, and let VirtualBox know about them.&lt;/p&gt;
&lt;p&gt;I found that a &lt;code&gt;VBoxManage&lt;/code&gt; command is helpful here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PS&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;ZhiAn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:\Program Files\Oracle\VirtualBox\VBoxManage.exe&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;registervm&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:\cygwin\home\ZhiAn\VirtualBox VMs\box\box.vbox&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So just call the &lt;code&gt;registervm&lt;/code&gt; subcommand and pass in the path to a &lt;code&gt;.vbox&lt;/code&gt; file, which lived my cygwin drive.&lt;/p&gt;
&lt;h2&gt;VirtualBox Guest Additions version don't match! What is that???&lt;/h2&gt;
&lt;p&gt;The Guest Additions is installed on the guest OS to enable cool stuff, like mouse pointer integration etc. Don't know too much about it, I just don't like the warnings.&lt;/p&gt;
&lt;p&gt;I had some trouble finding instructions to upgrade this, and after some digging through old forum posts, issues on vagrant's GitHub issue tracker, and Oracle's documentation on VirtualBox, I believe I have the solution. But only if you're on a Windows host and trying to run a Linux guest.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the Guest Additions iso from here &lt;a href=""&gt;http://dlc-cdn.sun.com/virtualbox/4.3.26/index.html&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Open up your VirtualBox GUI, start the box you want to update the Guest Additions.&lt;/li&gt;
&lt;li&gt;In the open window for the box, select 'Insert Guest Additions'&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now in the guest OS execute these commands:&lt;/p&gt;
&lt;p&gt;cd ~ &amp;amp;&amp;amp; mkdir vbox
mount /dev/sr0 vbox/
./VBoxLinuxAdditions&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>What are Peephole Optimizations?</title><link href="http://ngzhian.com/blog/what-are-peephole-optimizations.html" rel="alternate"></link><updated>2015-04-28T18:00:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-04-28:blog/what-are-peephole-optimizations.html</id><summary type="html">&lt;p&gt;As part of &lt;a href="http://ngzhian.com/blog/what-the-heck-is-google-closure-compiler.html"&gt;the series&lt;/a&gt; exploring the internals of Google Closure Compiler, this time we are diving into one of the many optimizations that it does, the peephole optimization.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/google/closure-compiler/blob/0f7da6bca71de86ea949fcec45ee8db699a3af45/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java#L22-L28"&gt;code itself&lt;/a&gt; describes peephole optimizations as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;optimizations that look at a small section of code and either remove
that code (if it is not needed) or replaces it with smaller code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And from &lt;a href="https://en.wikipedia.org/wiki/Peephole_optimization"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In compiler theory, peephole optimization is a kind of optimization performed over a very small set of instructions in a segment of generated code. The set is called a &amp;gt; "peephole" or a "window". It works by recognising sets of instructions that can be replaced by shorter or faster sets of instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's try an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would be completely correct if it were written as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it's easy to verify so!&lt;/p&gt;
&lt;p&gt;This is a particular kind of peephole optimization that known as "contant folding", which has an &lt;a href="https://en.wikipedia.org/wiki/Constant_folding"&gt;entire wiki page&lt;/a&gt; dedicated.&lt;/p&gt;
&lt;p&gt;To quote what Wikipedia has to say about constant folding:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Constant folding is the process of recognizing and evaluating constant expressions at compile time rather than computing them at runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's about getting results event before running any code! I think of it as being similar to static typing, where you can prove correctness without running the code.&lt;/p&gt;
&lt;p&gt;The Wiki page gives more examples of constant folding that a compiler may do, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fold &lt;code&gt;0 * x&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fold &lt;code&gt;"abc" + "def"&lt;/code&gt; to &lt;code&gt;"abcdef"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can find out if the closure compiler does such folding:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var z = 0 * 10;&lt;/code&gt; gets compiled to &lt;code&gt;var z = 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, probably unsurprisingly, &lt;code&gt;var s = "abc" + "def"&lt;/code&gt; gets compiled to &lt;code&gt;var s = "abcdefg"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A more advanced optimization is &lt;em&gt;Constant Propagation&lt;/em&gt;. This is when values of expressions are known during the compilation stage, because they are constant, and can be substituted.&lt;/p&gt;
&lt;p&gt;For example, this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will be compiled down to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However to get this using the closure compiler, you have to turn on advanced optimizations, the instructions are &lt;a href="https://developers.google.com/closure/compiler/docs/api-tutorial3#enable-app"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you tried this and got and empty file, chances are that the compiler eliminated all code in the &lt;em&gt;dead code elimination&lt;/em&gt; pass, where unused code is just thrown away. This is another compilation pass that is enabled when you turn on advanced optimizations.&lt;/p&gt;
&lt;p&gt;In this case you can just add a stray log statement to ensure that the variable is used, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you should see, &lt;code&gt;console.log(20)&lt;/code&gt;. Pretty crazy optimizations huh?&lt;/p&gt;
&lt;p&gt;Here are the peephole optimizations that the closure compiler has:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of peephole optimizations in closure compiler" src="http://i.imgur.com/dhRAzCX.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Why would anyone write code like this?&lt;/h1&gt;
&lt;p&gt;When I first saw this example, I was thinking to myself, would people even write such code? And almost immediately I realized that I was guilty of this!&lt;/p&gt;
&lt;p&gt;When building websites, I often use the &lt;code&gt;setInterval&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; functions. Both of these functions take as their first argument a callback function, and the second argument is a time duration in milliseconds. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hi!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Would set off an alert saying 'Hi!' every 5 seconds. It isn't that hard seeing that 5000ms is 5 seconds... Or you could write it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hi!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes the 5 extremely obvious.&lt;/p&gt;
&lt;p&gt;When more complicated calculations are involved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;SECONDS_IN_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's nice knowing that it will be compiled down to &lt;code&gt;SECONDS_IN_DAY=86400&lt;/code&gt;.&lt;/p&gt;</summary></entry><entry><title>Set up Vim for JavaScript development</title><link href="http://ngzhian.com/blog/set-up-vim-for-javascript-development.html" rel="alternate"></link><updated>2015-04-24T18:00:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-04-24:blog/set-up-vim-for-javascript-development.html</id><summary type="html">&lt;p&gt;A couple of days ago I decided to get my JavaScript development environment in order.&lt;/p&gt;
&lt;p&gt;I haven't been doing much JS dev lately, mostly just tweaking a tiny bit of JS, but I had just received a pure frontend JS task. So I thought it would be a good time to do so!&lt;/p&gt;
&lt;p&gt;I live in Vim world, and these instructions are assembled from various places all over the web.&lt;/p&gt;
&lt;p&gt;Here's how my setup looks like right now&lt;/p&gt;
&lt;p&gt;&lt;img alt="My Vim JavaScript setup, with d3.js code" src="http://i.imgur.com/JjT5XW2.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Syntax highlighting&lt;/h1&gt;
&lt;p&gt;First thing I wanted was syntax highlighting, and I usually just head to GitHub to do a search.&lt;/p&gt;
&lt;p&gt;I found a couple of vim scripts for this, and I chose [this] (https://github.com/pangloss/vim-javascript) because it was the most recently updated, and had the most number of stars.&lt;/p&gt;
&lt;p&gt;As I used &lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt;, this was as easy as adding a line to my &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Plugin &lt;span class="s2"&gt;&amp;quot;pangloss/vim-javascript&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Indentation&lt;/h1&gt;
&lt;p&gt;From my observation, 2 spaces seems to be pretty popular, so I went with that as well.&lt;/p&gt;
&lt;p&gt;This doesn't require any plugin, Vim has really good support for smart indentations built in, we just need to which command does it!&lt;/p&gt;
&lt;p&gt;In this case refering to &lt;code&gt;.vimrc&lt;/code&gt; files of experienced vim users really helps. One notable Vim (and Ruby) expert I really like is &lt;a href="https://github.com/r00k/"&gt;Ben Orenstein&lt;/a&gt;. Thanks Ben!&lt;/p&gt;
&lt;p&gt;I went to &lt;a href="https://github.com/r00k/dotfiles/blob/master/vimrc#L59-72"&gt;his dotfiles&lt;/a&gt; and found the lines that was releveant, which was the &lt;code&gt;autocmd&lt;/code&gt; command, &lt;a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#:autocmd"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;autocmd FileType javascript setlocal sw=2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;autocmd&lt;/code&gt; basically sets some settings when you open a file of a specific type.&lt;/p&gt;
&lt;p&gt;So for the setting aove, everytime you open a &lt;code&gt;javascript&lt;/code&gt; file, it will set the &lt;code&gt;shiftwidth&lt;/code&gt; to 2 locally (i.e. only the current buffer or window), &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#:setlocal"&gt;docs on setlocal&lt;/a&gt;, &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#" title="shiftwidth"&gt;docs on shiftwidth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out my own &lt;code&gt;.vimrc&lt;/code&gt; &lt;a href="https://github.com/ngzhian/dotfiles/blob/master/.vimrc"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Linting, style checks&lt;/h1&gt;
&lt;p&gt;Linting is really helpful and we should always have it turned on.&lt;/p&gt;
&lt;p&gt;It helps captures stupid typos which would result in undefined references, breaking the page. It also ensures that you write code that is formatted consistently.&lt;/p&gt;
&lt;p&gt;And there are many other reasons as well!&lt;/p&gt;
&lt;p&gt;A helpful resource was &lt;a href="http://stackoverflow.com/questions/473478/vim-jslint/5893447#5893447"&gt;this stackoverflow question&lt;/a&gt;, and I basically followed the instruction on one of those answer.&lt;/p&gt;
&lt;p&gt;First, install &lt;a href="https://github.com/scrooloose/syntastic"&gt;Syntastic&lt;/a&gt;, which is an amazing, flexible syntax checker for Vim. It works really well and is extensible, so you can plug in different checkers for each file type.&lt;/p&gt;
&lt;p&gt;For JavaScript, there are multiple checkers available, one that I chose was &lt;a href="http://jshint.com/docs/"&gt;jshint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is easy to install, assuming you have &lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install jshint -g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart Vim, and Syntastic will automatically pick up jshint.&lt;/p&gt;
&lt;p&gt;Open up a JavaScript file, then use this ex command &lt;code&gt;:SyntasticInfo&lt;/code&gt; to verify that &lt;code&gt;jshint&lt;/code&gt; is indeed active.&lt;/p&gt;
&lt;p&gt;Another checker worth looking at is Google's &lt;a href="https://developers.google.com/closure/utilities/docs/linter_howto"&gt;closure library linter&lt;/a&gt;. This is particularly interesting because just a couple of days ago I was exploring the Google Closure Compiler, &lt;a href="http://ngzhian.com/blog/what-the-heck-is-google-closure-compiler.html"&gt;here's my blog post on it.&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>What the heck is Google Closure Compiler?</title><link href="http://ngzhian.com/blog/what-the-heck-is-google-closure-compiler.html" rel="alternate"></link><updated>2015-04-20T19:00:00-04:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-04-20:blog/what-the-heck-is-google-closure-compiler.html</id><summary type="html">&lt;p&gt;It "compiles from JavaScript to better JavaScript", so why would any one want that?&lt;/p&gt;
&lt;p&gt;According to the &lt;a href="https://github.com/google/closure-compiler"&gt;GitHub repo&lt;/a&gt;, closure compiler does many amazing things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parses your JavaScript,&lt;/li&gt;
&lt;li&gt;analyzes it,&lt;/li&gt;
&lt;li&gt;removes dead code and rewrites&lt;/li&gt;
&lt;li&gt;minimizes what's left&lt;/li&gt;
&lt;li&gt;checks syntax, variable references, and types,&lt;/li&gt;
&lt;li&gt;and warns about common JavaScript pitfalls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's pretty complicated. But no fear, this series will explore the Closure Compiler, one feature at a time.&lt;/p&gt;
&lt;p&gt;Let's follow their instructions and try to run it from the command line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;java -jar build/compiler.jar
var &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; + 25&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output we get is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var x=42;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What noticeable differences are there?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;17 + 25&lt;/code&gt; became &lt;code&gt;42&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Space between and after &lt;code&gt;=&lt;/code&gt; is gone&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So even for this simple one liner, closure compiler has managed to run 2 optimizations.&lt;/p&gt;
&lt;p&gt;Let's examine these optimizations closer, and what better way to do that then jump into the debugger :)&lt;/p&gt;
&lt;h1&gt;Running from the command line&lt;/h1&gt;
&lt;p&gt;We create file called &lt;code&gt;in1.js&lt;/code&gt; with the contents &lt;code&gt;var x = 17 + 25&lt;/code&gt;, and in our debug configuration
specify the program arguments as &lt;code&gt;--js_output_file=out.js in1.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We do this because we don't want to be typing input in the Eclipse console (I don't know how to do that :P)&lt;/p&gt;
&lt;p&gt;The initial part isn't that interesting, we just initiate the &lt;code&gt;CommandLineRunner&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;CommandLineRunner&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CommandLineRunner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shouldRunCompiler&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@CommandLineRunner.java#L1434-1437&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which delegates work to &lt;code&gt;AbstractCommandLineRunner&lt;/code&gt;'s &lt;code&gt;run()&lt;/code&gt; method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doRun&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@AbstractCommandLineRunner.java#L397-403&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which then hands off to &lt;code&gt;doRun()&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Warning&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;I had to go into my debug configuration in eclipse and add the folder where &lt;code&gt;externs.zip&lt;/code&gt; was located in so &lt;code&gt;getResourceAsStream&lt;/code&gt; could find the file.
Basically &lt;code&gt;createExterns&lt;/code&gt; copies all the files in &lt;code&gt;externs.zip&lt;/code&gt; into a list that will be used later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next steps sets up the compiler with the appropriate options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;doRun&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;FlagUsageException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLoggingLevel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loggingLevel&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SourceFile&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;externs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createExterns&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createCompiler&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createOptions&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@AbstractCommandLineRunner.java#L807-813&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The part where usually the runner will wait for user input is here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SourceFile&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createSourceInputs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsFiles&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;skipNormalOutputs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hoistExterns&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@AbstractCommandLineRunner.java#L847-853&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But because we supplied arguments to the parameter, it reads from that file and not &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are some set up steps again, and finally we jump into the &lt;code&gt;compile&lt;/code&gt; method, the meat of
which happens in a separate thread it seems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;runInCompilerThread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compileInternal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;getResult&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Compiler.java#L652-660&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because it is a separate thread, I had to set a breakpoint inside &lt;code&gt;compileInternal&lt;/code&gt;
in order to take a look at what's happening.&lt;/p&gt;
&lt;h2&gt;Inside the compiler&lt;/h2&gt;
&lt;p&gt;Some very small set up to process compiler options and initialize progress state, but
there's a very interesting comment here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;compileInternal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setProgress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CompilerOptionsPreprocessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;preprocess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// 15 percent of the work is assumed to be for parsing (based on some&lt;/span&gt;
    &lt;span class="c1"&gt;// minimal analysis on big JS projects, of course this depends on options)&lt;/span&gt;
    &lt;span class="n"&gt;setProgress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;parse&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Compiler.java#L741-747&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We're not going to dive into the &lt;code&gt;parse&lt;/code&gt; method, that's not what we're after.&lt;/p&gt;
&lt;p&gt;From a cursory look into the method, &lt;code&gt;parse&lt;/code&gt; parses the inputs and returns an AST. This AST is stored in the &lt;code&gt;jsRoot&lt;/code&gt; instance variable&lt;/p&gt;
&lt;p&gt;And we end up in the &lt;code&gt;optimize&lt;/code&gt; method! Okay I have a feeling this is where things are going to get exciting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Compiler.java#L764&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;First it gathers up a list of optimizations that will be performed, e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gatherExternProperties,&lt;/li&gt;
&lt;li&gt;garbageCollectChecks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A list of all these optimizations can be found in the &lt;code&gt;getOptimizations&lt;/code&gt; method of &lt;code&gt;DefaultPassConfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From how the code looks like, each optimization is also called a &lt;code&gt;pass&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;optimize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PassFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;optimizations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPassConfig&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getOptimizations&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optimizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Compiler.java#L1951-1955&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Observe how &lt;code&gt;optimizations&lt;/code&gt; is a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;PassFactory&lt;/code&gt; (factory pattern).&lt;/p&gt;
&lt;p&gt;The first pass is the &lt;code&gt;normalize&lt;/code&gt; pass. It seems like for each pass there is a set of steps that must be followed, something like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;startPass&lt;/code&gt; is called with the name of the pass&lt;/li&gt;
&lt;li&gt;actually process the pass&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endPass&lt;/code&gt; is called, probably for cleanup effects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;startPass&lt;/code&gt; itself has a number of steps as well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;check the current state of passing&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;currentPassName&lt;/code&gt; to signify what pass it is&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;currentTracer&lt;/code&gt; to a new &lt;code&gt;Tracer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I haven't dug into what a &lt;code&gt;Tracer&lt;/code&gt; does, but from the comments it looks like it figures out how long a particular action took, and thus will be useful when you want to pin point slow areas in the code.&lt;/p&gt;
&lt;p&gt;So let's jump into the work that &lt;code&gt;normalize&lt;/code&gt; actually does.&lt;/p&gt;
&lt;p&gt;It's not difficult to see what it does, because most of it is well document in the &lt;code&gt;Normalize&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Here's directly quoting the docs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/**&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;simplify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;statements&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Which&lt;/span&gt; &lt;span class="n"&gt;become&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;said&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L33-46&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you keep looking down, you see descriptions about the 7 things that this class does.&lt;/p&gt;
&lt;p&gt;After some set up, the &lt;code&gt;process&lt;/code&gt; method of &lt;code&gt;Normalize&lt;/code&gt; is called, and that's where magic happens!&lt;/p&gt;
&lt;h2&gt;Traversing/Visiting&lt;/h2&gt;
&lt;p&gt;The first step is strange to me at first sight:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NodeTraversal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NormalizeStatements&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assertOnChange&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;traverseRoots&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L116-118&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It looks like this isn't doing anything. But we we look into what &lt;code&gt;NodeTraversal&lt;/code&gt; does, it actually takes in a &lt;code&gt;Callback&lt;/code&gt;, and when it traverses the AST (&lt;code&gt;traverseRoots&lt;/code&gt;), it calls particular methods of &lt;code&gt;Callback&lt;/code&gt; at different points of traversing.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;traverseRoots&lt;/code&gt; calls &lt;code&gt;traverseBranch&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="n"&gt;traverseBranch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scopeRoot&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@NodeTraversal.java#L306&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and in &lt;code&gt;traverseBranch&lt;/code&gt;, it calls the &lt;code&gt;visit&lt;/code&gt; method of the callback&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@NodeTraversal.java#L577&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In summary the &lt;code&gt;NodeTraversal&lt;/code&gt; goes through the AST and at various points, asks the &lt;code&gt;Callback&lt;/code&gt; if it wants to visit a particular node (Visitor pattern).&lt;/p&gt;
&lt;p&gt;Now we can see what &lt;code&gt;NormalizeStatements&lt;/code&gt; does.&lt;/p&gt;
&lt;p&gt;There are really only 2 methods of interest here, &lt;code&gt;shouldTraverse&lt;/code&gt; and &lt;code&gt;visit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shouldTraverse&lt;/code&gt; is &lt;code&gt;NormalizeStatements&lt;/code&gt;'' way of saying if it should descend down one level in the AST.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;visit&lt;/code&gt; is what &lt;code&gt;NormalizeStatements&lt;/code&gt; will do to modify the AST.&lt;/p&gt;
&lt;p&gt;Looking into &lt;code&gt;shouldTraverse&lt;/code&gt;, we see that first, it always returns &lt;code&gt;true&lt;/code&gt;, and it does some normalizations inside of this method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;shouldTraverse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NodeTraversal&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;doStatementNormalizations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L368-372&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If we dive deeper into the code we can see very well written comments why certain normalizations are done in the &lt;code&gt;shouldTraverse&lt;/code&gt; method, and why others are done in the &lt;code&gt;visit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, in &lt;code&gt;doStatementNormalizations&lt;/code&gt;, the &lt;code&gt;extractForInitializer&lt;/code&gt; method is called, and the comments are as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Bring the initializers out of FOR loops.  These need to be placed&lt;/span&gt;
&lt;span class="cm"&gt;     * before any associated LABEL nodes. This needs to be done from the top&lt;/span&gt;
&lt;span class="cm"&gt;     * level label first so this is called as a pre-order callback (from&lt;/span&gt;
&lt;span class="cm"&gt;     * shouldTraverse).&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @param n The node to inspect.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param before The node to insert the initializer before.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param beforeParent The parent of the node before which the initializer&lt;/span&gt;
&lt;span class="cm"&gt;     *     will be inserted.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L561-571&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because it's a AST traversal implemented with callbacks, it wasn't easy to get to the code that was interesting. A lot of is was just descending the AST (in what looks like a depth first manner), before we finally get to the &lt;code&gt;visit&lt;/code&gt; part of the code.&lt;/p&gt;
&lt;p&gt;Particularly I hit a point where I ended up in this switch case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SETTER_DEF&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLifeCycleStage&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;isNormalizedObfuscated&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;annotateConstantsByConvention&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L399-403&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I couldn't understand what &lt;code&gt;Token.SETTER_DEF&lt;/code&gt; meant, so I went to the Variables panel in eclipse and looked at what &lt;code&gt;n&lt;/code&gt; was (the switch block switched on &lt;code&gt;n.getType()&lt;/code&gt;), and saw that n was "x".&lt;/p&gt;
&lt;p&gt;The rest of the &lt;code&gt;process&lt;/code&gt; method looks similar, where callbacks are passed into a travesal, with different callbacks doing different things.&lt;/p&gt;
&lt;p&gt;The slight differences are the types of &lt;code&gt;Callback&lt;/code&gt;s used.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NormalizeStatements&lt;/code&gt; implements the &lt;code&gt;Callback&lt;/code&gt; interface at the highest level, and there over 20 classes or abstract classes that implement this interface.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MakeDeclaredNamesUnique&lt;/code&gt; implements the ScopedCallback, because when renaming variables, scope has to be considered. E.g. a variable that refers to a variable in the outer scope cannot be renamed to something different.&lt;/p&gt;
&lt;p&gt;Here's something that caused me difficulty in reading this particular method: there are multiple layers of abstraction here, which makes it pretty confusing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's not clear how many things &lt;code&gt;process&lt;/code&gt; is actually doing.&lt;/li&gt;
&lt;li&gt;The actions are inconsistent. In some places, the construction of a &lt;code&gt;NodeTraversal&lt;/code&gt; using &lt;code&gt;new&lt;/code&gt; and calling &lt;code&gt;traverseRoots&lt;/code&gt; happens on the same line. But in others, the &lt;code&gt;Callback&lt;/code&gt; is constructed separately from the &lt;code&gt;NodeTraversal&lt;/code&gt;, which are separate from actually calling the &lt;code&gt;traverse&lt;/code&gt; method. In other places, these 3 steps are separated into another method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perhaps to clean up this method slightly, we can move each sub-processing step into its own method, like &lt;code&gt;removeDuplicateDeclarations&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;removeDuplicateDeclarations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@Normalize.java#L138&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;process&lt;/code&gt; will look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;normalizeStatements&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;makeDeclaredNamesUnique&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;removeDuplicateDeclarations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;propagateConstantAnnotationsOverVars&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;findExposeAnnotations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For our simple piece of code, &lt;code&gt;normalize&lt;/code&gt; actually doesn't do anything, so that was a pretty long detour. But I think we will see the patterns in &lt;code&gt;normalize&lt;/code&gt; again thorughout the codebase, so it is still useful to examine it.&lt;/p&gt;
&lt;p&gt;For each &lt;code&gt;startPass&lt;/code&gt;, there is its dual &lt;code&gt;endPass&lt;/code&gt;, which stops the &lt;code&gt;Tracer&lt;/code&gt; (so a tracer probably records how long each compiler pass took).&lt;/p&gt;
&lt;h1&gt;The PhaseOptimizer&lt;/h1&gt;
&lt;p&gt;And we're back in &lt;code&gt;optimize&lt;/code&gt;! Here we hit something scary (to me) called the &lt;code&gt;PhaseOptimizer&lt;/code&gt;.
We throw all the optimizations in to the &lt;code&gt;phaseOptimizer&lt;/code&gt; via its &lt;code&gt;consume&lt;/code&gt; method, and basically &lt;code&gt;consume&lt;/code&gt; organizes these &lt;code&gt;PassFactory&lt;/code&gt;-ies into &lt;code&gt;CompilePasses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like its name suggest, &lt;code&gt;PhaseOptimizer&lt;/code&gt; does some optimizations. These are (for now) too complicated to get into, but here are relevant portions of the code that describes what happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Add the passes generated by the given factories to the compile sequence.&lt;/span&gt;
&lt;span class="cm"&gt;   * &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;   * Automatically pulls multi-run passes into fixed point loops. If there&lt;/span&gt;
&lt;span class="cm"&gt;   * are 1 or more multi-run passes in a row, they will run together in&lt;/span&gt;
&lt;span class="cm"&gt;   * the same fixed point loop. The passes will run until they are finished&lt;/span&gt;
&lt;span class="cm"&gt;   * making changes.&lt;/span&gt;
&lt;span class="cm"&gt;   * &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;   * The PhaseOptimizer is free to tweak the order and frequency of multi-run&lt;/span&gt;
&lt;span class="cm"&gt;   * passes in a fixed-point loop.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PassFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factories&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PhaseOptimizer.java#L128-139&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * A compound pass that contains atomic passes and runs them until they reach&lt;/span&gt;
&lt;span class="cm"&gt;   * a fixed point.&lt;/span&gt;
&lt;span class="cm"&gt;   * &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;   * Notice that this is a non-static class, because it includes the closure&lt;/span&gt;
&lt;span class="cm"&gt;   * of PhaseOptimizer.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="nd"&gt;@VisibleForTesting&lt;/span&gt;
  &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Loop&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;CompilerPass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PhaseOptimizer.java#L400-408&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At the end of &lt;code&gt;consume&lt;/code&gt;, what we have is &lt;code&gt;passes&lt;/code&gt; which is a list of &lt;code&gt;CompilerPass&lt;/code&gt;-es that will be run. We then call the &lt;code&gt;process&lt;/code&gt; method of the &lt;code&gt;PhaseOptimizer&lt;/code&gt;, which goes through each &lt;code&gt;CompilerPass&lt;/code&gt; (in &lt;code&gt;passes&lt;/code&gt;) and calls the &lt;code&gt;process&lt;/code&gt; method of that &lt;code&gt;CompilerPass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This should look pretty familiar because &lt;code&gt;Normalize&lt;/code&gt; actually implements &lt;code&gt;CompilerPass&lt;/code&gt;, and so we have a clue of what happens in the &lt;code&gt;process&lt;/code&gt; method of each &lt;code&gt;CompilerPass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to figure out which exact &lt;code&gt;CompilerPass&lt;/code&gt; was causing the change, so I added some if else and print statements to notify me when the nodes were changed by a pass. This is how it roughly looked like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;old_root_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toStringTree&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;new_root_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toStringTree&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_root_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contentEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_root_str&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
          &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Same: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pass: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; old: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;old_root_str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; new: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_root_str&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What I found strange is that the &lt;code&gt;process&lt;/code&gt; method of &lt;code&gt;PhaseOptimizer&lt;/code&gt; ran twice. I found out because I had set breakpoints in that method.&lt;/p&gt;
&lt;p&gt;In the first run of &lt;code&gt;process&lt;/code&gt;, there was only 1 pass that caused a change: &lt;code&gt;inferConsts&lt;/code&gt;, but I couldn't tell what changed based on the &lt;code&gt;toString()&lt;/code&gt; output, so this isn't the pass we are interested in.&lt;/p&gt;
&lt;p&gt;In the second run of &lt;code&gt;process&lt;/code&gt;, we get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Same&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;beforeMainOptimizations&lt;/span&gt;
&lt;span class="n"&gt;Pass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;google&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jscomp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PhaseOptimizer&lt;/span&gt;&lt;span class="n"&gt;$Loop&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dd37992&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BLOCK&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;synthetic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;SCRIPT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;synthetic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;InputId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;VAR&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;is_constant_var&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;ADD&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;NUMBER&lt;/span&gt; &lt;span class="mf"&gt;17.0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;NUMBER&lt;/span&gt; &lt;span class="mf"&gt;25.0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BLOCK&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;synthetic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;change_time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;SCRIPT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;synthetic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;InputId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;VAR&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;is_constant_var&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;NUMBER&lt;/span&gt; &lt;span class="mf"&gt;42.0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Same&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;beforeModuleMotion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bingo! Or not?&lt;/p&gt;
&lt;h2&gt;Multiple passes&lt;/h2&gt;
&lt;p&gt;We managed to figure out the pass that caused the optimization, but the name of the pass didn't really help at all.&lt;/p&gt;
&lt;p&gt;But at least we know this pass happens before &lt;code&gt;beforeModuleMotion&lt;/code&gt; and after &lt;code&gt;beforeMainOptimizations&lt;/code&gt;, and because the list of &lt;code&gt;CompilerPass&lt;/code&gt; is traversed in order, we can go into &lt;code&gt;DefaultPassConfig&lt;/code&gt; and take a look at what is in between these 2 passes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getMainOptimizationLoop&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L594&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This basically adds about 10+ &lt;code&gt;PassFactory&lt;/code&gt;-ies to the list via the methods &lt;code&gt;getMainOptimizationLoop&lt;/code&gt; and &lt;code&gt;getCodeRemovingPasses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By setting more debug breakpoints, I was able to narrow down my options to those found in &lt;code&gt;getCodeRemovingPasses&lt;/code&gt;. Now I guess I just have to read what each pass does, or set breakpoints in every pass and observe what happens!&lt;/p&gt;
&lt;p&gt;I think the former isn't a good idea, because the &lt;code&gt;PhaseOptimizer&lt;/code&gt; might run each pass multiple times, and I'll just be debugging for a long time.&lt;/p&gt;
&lt;p&gt;Here, I basically looked at each of them, read the comments and figure out what was likely to be the &lt;code&gt;CompilerPass&lt;/code&gt; that did some work. My guess is that &lt;code&gt;PeepholeOptimizationsPass&lt;/code&gt; did it.&lt;/p&gt;
&lt;p&gt;Digging into the creation of &lt;code&gt;PeepholeOptimizationsPass&lt;/code&gt; we see multiple kinds of peephole optimizations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="cm"&gt;/** Various peephole optimizations. */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;PassFactory&lt;/span&gt; &lt;span class="n"&gt;peepholeOptimizations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PassFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peepholeOptimizations&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;CompilerPass&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractCompiler&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeOptimizationsPass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeMinimizeConditions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;late&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeSubstituteAlternateSyntax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;late&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeReplaceKnownMethods&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;late&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeRemoveDeadCode&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeFoldConstants&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;late&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepholeCollectPropertyAssignments&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L1299-1313&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I decided to brute force and figure out which of these are responsible for the AST changes, so I basically just removed these &lt;code&gt;AbstractPeepholeOptimization&lt;/code&gt; one by one until the AST didn't change, that way I can figure out which one is responsible.&lt;/p&gt;
&lt;p&gt;Here I stumbled upon a funny little problem that took me a good deal of debugging to solve.&lt;/p&gt;
&lt;p&gt;Since we figure that the pass happens in &lt;code&gt;getMainOptimizationLoop&lt;/code&gt;, I tried commenting that part out, but found that the pass still happened! That was really strange. Here's the part I commented out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createEmptyPass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beforeModuleMotion&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L596&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What I ended up doing was to slowly comment out parts of the &lt;code&gt;getOptimizations&lt;/code&gt; method, which &lt;code&gt;getMainOptimizationLoop&lt;/code&gt; lives in, and see when I can get the the pass to not be processed.&lt;/p&gt;
&lt;p&gt;While going through the file to comment the code I took glances at the code as well and found out that in multiple places &lt;code&gt;PeepholeOptimizationsPass&lt;/code&gt; was inserted in to the list of &lt;code&gt;CompilerPass&lt;/code&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;peepholeOptimizations&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L711&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latePeepholeOptimizations&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L752&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To reduce the surface area of search, we will comment out all of these except for 1,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;peepholeOptimizations&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@DefaultPassConfig.java#L711&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can proceed to comment out parts of &lt;code&gt;peepholeOptimizations&lt;/code&gt; to figure out which exact &lt;code&gt;AbstractPeepholeOptimization&lt;/code&gt; is doing the work, which is &lt;code&gt;PeepholeFoldConstants&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This optimzation is not that simple to understand because it is made up of multiple smaller peephole optimizations.&lt;/p&gt;
&lt;p&gt;Let's start from the top, which is a &lt;code&gt;PeepholeOptimizationsPass&lt;/code&gt;. As per normal, this is a &lt;code&gt;CompilerPass&lt;/code&gt;, so the &lt;code&gt;process&lt;/code&gt; method is where this happen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;externs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addChangeHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;beginTraversal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;NodeTraversal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;traverseChangedFunctions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FunctionCallback&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractCompiler&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isFunction&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLastChild&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;NodeTraversal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;traverse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PeepCallback&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;retraverseOnChange&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasCodeChanged&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;endTraversal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeChangeHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PeepholeOptimizationsPass.java#L55-72&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;process&lt;/code&gt; we see something different, the usage of &lt;code&gt;NodeTraversal.traverseChangedFunctions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This works similarly to the &lt;code&gt;Callbacks&lt;/code&gt; we discussed above, except that the traversal only happens when functions are changed. The callback for this traversal is actually called &lt;code&gt;PeepCallback&lt;/code&gt;, which runs each &lt;code&gt;AbstractPeepholeOptimization&lt;/code&gt; when visiting each node by calling their &lt;code&gt;optimizeSubtree&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PeepCallback&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractShallowCallback&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NodeTraversal&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;codeChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;codeChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractPeepholeOptimization&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;peepholeOptimizations&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;optimizeSubtree&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;codeChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codeChanged&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PeepholeOptimizationsPass.java#L74-93&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Finally, we found it!&lt;/h2&gt;
&lt;p&gt;Now we know where to look to find out what &lt;code&gt;PeepholeFoldConstants&lt;/code&gt; does.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="nf"&gt;optimizeSubtree&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NEW&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldCtorCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPEOF&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldTypeof&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;POS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NEG&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BITNOT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tryReduceOperandsForOp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldUnaryOperator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VOID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryReduceVoid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nl"&gt;      default:&lt;/span&gt;
        &lt;span class="n"&gt;tryReduceOperandsForOp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldBinaryOperator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PeepholeFoldConstants.java#L78-100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reading the code we can guess which switch case we will land into, the &lt;code&gt;default&lt;/code&gt; case.&lt;/p&gt;
&lt;p&gt;Here we're just going to make a guess which method does the optimization, I'm going to pick &lt;code&gt;tryFoldBinaryOperator&lt;/code&gt; because it sounds like it.&lt;/p&gt;
&lt;p&gt;Jumping in we see a switch statement switching on the type of the subtree, which in our case is an addition. So we dive into the &lt;code&gt;tryFoldAdd&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldAdd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PeepholeFoldConstants.java#L151-152&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We encounter some useful comments here so we can jump straight into the &lt;code&gt;else&lt;/code&gt; branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Try arithmetic add&lt;/span&gt;
      &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tryFoldArithmeticOp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tryFoldLeftChildOp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@PeepholeFoldConstants.java#L849-856&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To verify that this is indeed the optimization we care about, we can jump into the method and just result whatever was passed in.&lt;/p&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;By commenting out the lines in &lt;code&gt;tryFoldArithmeticOp&lt;/code&gt; and just return &lt;code&gt;n&lt;/code&gt;, we can verify that the optimization does not run!&lt;/p&gt;
&lt;p&gt;We can dig deeper and look into &lt;code&gt;performArithmeticOp&lt;/code&gt;, but all we need to know is that it performs the addition, returning a Node. If the addition worked, Node would just be a number, which is the result of the addition (in our case thats 42), and replace &lt;code&gt;n&lt;/code&gt; (which was a &lt;code&gt;add&lt;/code&gt; subtree), with just a single node!&lt;/p&gt;
&lt;h1&gt;Recap&lt;/h1&gt;
&lt;p&gt;After this long post, I think it's worth recapping what happens.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The compiler is set up with options, things like where to get the JS (stdin or a file?)&lt;/li&gt;
&lt;li&gt;JavaScript is parsed into a tree&lt;/li&gt;
&lt;li&gt;Gather up the list of optimizations that will be run&lt;/li&gt;
&lt;li&gt;normalize (which is actually a compiler pass)&lt;/li&gt;
&lt;li&gt;Feed the list of optimziations into the &lt;code&gt;PhaseOptimizer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PhaseOptimizer&lt;/code&gt; will run through all the optimizations&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;CompilerPass&lt;/code&gt; will process the AST via callbacks when traversing the tree&lt;/li&gt;
&lt;li&gt;Compiled JavaScript is output (to stdout or file)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's way more that goes on, like how the &lt;code&gt;PhaseOptimizer&lt;/code&gt; runs the list of optimizations, fixed-point optimizations that can be run multiple times safely, the many different kinds of &lt;code&gt;Callback&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;But at a high level, this is how things are run.&lt;/p&gt;
&lt;p&gt;Conclusion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open source is awesome. Because Google released this source code, we can look into the code to figure out how things work!&lt;/li&gt;
&lt;li&gt;Debuggers are super useful. Because Eclipse, and other IDEs, are such fantastic tools, we can insert breakpoints, jump around code, build and run projects with ease.&lt;/li&gt;
&lt;li&gt;Patterns are useful! In this dive into the code, we have already observed a couple of design patterns, namely the Visitor pattern and the Factory pattern. This has allowed the compiler to stay very flexible. I can imagine adding a new optimization pass by declaring a couple of new classes without touching the core of the compiler&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>So I set up a Jenkins CI server today</title><link href="http://ngzhian.com/blog/so-i-set-up-a-jenkins-ci-server-today.html" rel="alternate"></link><updated>2015-01-18T18:00:00-05:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-01-18:blog/so-i-set-up-a-jenkins-ci-server-today.html</id><summary type="html">&lt;p&gt;So I set up a local Jenkins CI server today that checks a local Git repository containing a Django project for any changes, runs tests, and reports coverage.&lt;/p&gt;
&lt;h1&gt;Tests? Wut?&lt;/h1&gt;
&lt;p&gt;There are many reasons to run test, and there are also many excuses not to run.
For me it is because I forget, and am too eager to push code.&lt;/p&gt;
&lt;p&gt;So how did I solve this? By setting up a local Jenkins CI server.&lt;/p&gt;
&lt;h1&gt;What is Jenkins? (to me)&lt;/h1&gt;
&lt;p&gt;To me Jenkins is a way to build my project and run tests easily, because it doesn't require any interaction from me (beyond setting it up). This leaves me with &lt;strong&gt;no&lt;/strong&gt; excuse not to run my tests.
My goal was to set up Jenkins such that everytime a commit is made to my working Git repository, my tests will run.
If you're wondering what CI is... &lt;a href="http://www.martinfowler.com/articles/continuousIntegration.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Installing Jenkins&lt;/h1&gt;
&lt;p&gt;I had a lot of help setting this up, refer to the bottom for a list. Here I'm just going to list the steps I went through and point out the challenges.&lt;/p&gt;
&lt;p&gt;First, I develop in a Vagrant box running Ubuntu. Jenkins has a Ubuntu package that makes installation simple, and they actually have &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu"&gt;instructions there&lt;/a&gt;. Basically it involves adding a new apt source and then installing Jenkins from there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
sudo sh -c &lt;span class="s1"&gt;&amp;#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;#39;&lt;/span&gt;
sudo apt-get update
sudo apt-get install jenkins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you can navigate to localhost:8080 on your browser to see Jenkin's web interface.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Since I develop in a Vagrant box, to access the Jenkins web interface I had to forward the ports. Jenkins listens on localhost:8080, so in my Vagrant file forwards 8080 (guest) to 8081 (host), and I can access Jenkins from my host at localhost:8081&lt;/p&gt;
&lt;h1&gt;Installing Plugins&lt;/h1&gt;
&lt;p&gt;My project resides in a Git repository, and Jenkins doesn't offer Git support out of the box. There's a plugin to help though. Detailed plugin instructions are &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to Jenkins interface &amp;gt; manage jenkins &amp;gt; manage plugins, and install Git Plugin. After installing, you can configure your job. Here are the settings I use:
- Repository URL is a path passed to &lt;code&gt;git clone&lt;/code&gt;, and my project is mounted onto &lt;code&gt;/vagrant&lt;/code&gt;
- Shallow clone, I don't need the full history of the repository, so this should make things speedier&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git configuration" src="http://ngzhian.com/blog/images/jenkins-git.png" /&gt;&lt;/p&gt;
&lt;p&gt;The setup for the Git means that your local git repo will be cloned down to Jenkin's &lt;em&gt;workspace&lt;/em&gt; before each build. A workspace is the directory Jenkins is processing the build in, and for me it is &lt;code&gt;/var/lib/jenkins/jobs/project/workspace&lt;/code&gt; where project is the name of the Jenkin's job. More information on the folder structure used by Jenkins can be found &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;The first build!&lt;/h1&gt;
&lt;p&gt;Next up we need to actually run the tests. This can be configured in the &lt;em&gt;Build&lt;/em&gt; section further down the page. Before Jenkins, how I was running my tests was just a shellscript, which is a simple wrapper around &lt;code&gt;manage.py test&lt;/code&gt; to pass in the right parameters. So for Jenkins, all I needed to do was to call the shell script.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="http://ngzhian.com/blog/images/jenkins-build.png" /&gt;&lt;/p&gt;
&lt;p&gt;Click Build Now, and then navigate to the console output to enjoy your success! I hope. That's your first Jenkin's build :)&lt;/p&gt;
&lt;h1&gt;Report coverage with Cobertura&lt;/h1&gt;
&lt;p&gt;I use &lt;code&gt;coverage.py&lt;/code&gt; to generate reports for my tests, and it also has &lt;a href="http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting"&gt;the ability&lt;/a&gt; to generate XML file that Cobertura can regonize.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cobertura" src="http://ngzhian.com/blog/images/jenkins-cobertura.png" /&gt;&lt;/p&gt;
&lt;p&gt;So again install Cobertura, and set it up by pointing it to the name of your coverage file. After this, click Build Now and you should be able to view the report from your build's status page.&lt;/p&gt;
&lt;h1&gt;Automate!&lt;/h1&gt;
&lt;p&gt;The final step is to set it up such that any changes you make (commit) will cause a build. We can do this is to set up a Build Trigger to Poll SCM (Git), on a 5 min schedule. So every 5 minutes, if Jenkins detects a change to the Git repository, it will run a new build.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build Triggers" src="http://ngzhian.com/blog/images/jenkins-build-trigger.png" /&gt;&lt;/p&gt;
&lt;p&gt;setup a local jenkins&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu"&gt;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/kmmbvnr/home/django-jenkins-tutorial"&gt;https://sites.google.com/site/kmmbvnr/home/django-jenkins-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting"&gt;http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="jenkins"></category><category term="tests"></category></entry><entry><title>NOC New York Financials</title><link href="http://ngzhian.com/blog/noc-financials.html" rel="alternate"></link><updated>2015-01-09T19:00:00-05:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-01-09:blog/noc-financials.html</id><summary type="html">&lt;p&gt;A couple of the juniors have been asking about living expenses here, so here's a real honest look at my financials for the past month:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Item&lt;/th&gt;
&lt;th align="right"&gt;Income&lt;/th&gt;
&lt;th align="center"&gt;Expenditure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Take home&lt;/td&gt;
&lt;td align="right"&gt;$1400&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Rent&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Phone&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;WiFi&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Gas &amp;amp; Electricity&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Heat&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Transport&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="center"&gt;$112&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(700 + 35 + 14 + 40 + 20 + 112) = $921 monthly essential expenses

$1.4k - $921 = $479 remaining to spend a month

$479 / 30 = $16 for food per day.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I don't buy any clothes.&lt;sup&gt;*&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Need more info?&lt;/h2&gt;
&lt;p&gt;Shoot me a question ngzhian@nus.edu.sg&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; Which I don't&lt;/p&gt;</summary><category term="noc"></category><category term="nus"></category><category term="financials"></category></entry><entry><title>NOC New York Module Credits mapping for SoC</title><link href="http://ngzhian.com/blog/noc-soc-mc-mapping.html" rel="alternate"></link><updated>2015-01-02T16:30:00-05:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-01-02:blog/noc-soc-mc-mapping.html</id><summary type="html">&lt;p&gt;&lt;em&gt;NOC is a big deal, so you'll probably have questions. This hopefully-series of articles serves to tell you more about a SOC student going on NOC in New York. Hope this helps you, feel free to drop me suggestions/questions at ngzhian@nus.edu.sg&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In one year, you should be able to clear 40 MCs in order to be MC-neutral&lt;sup&gt;*&lt;/sup&gt;.
For my batch we are able to clear up to &lt;strong&gt;32 MCs&lt;/strong&gt; because we do not have discipline-based module&lt;sup&gt;#&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Here's how I allocated my MCs (Computer Science):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;MCs&lt;/th&gt;
&lt;th&gt;Map to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TR3101&lt;/td&gt;
&lt;td&gt;Internship Continuous assessment&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Internship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TR3102&lt;/td&gt;
&lt;td&gt;Internship Program Report&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Internship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TR3103&lt;/td&gt;
&lt;td&gt;Start up Business case&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;ULR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TR3002&lt;/td&gt;
&lt;td&gt;New Venture Creation&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;UEM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MG2304&lt;/td&gt;
&lt;td&gt;Marketing&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;UEM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRXXXX&lt;/td&gt;
&lt;td&gt;TBC&lt;sup&gt;?&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;UEM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For &lt;strong&gt;CS&lt;/strong&gt; students, &lt;code&gt;TR3101&lt;/code&gt; and &lt;code&gt;TR3102&lt;/code&gt; can go towards clearing our &lt;a href="http://www.comp.nus.edu.sg/undergraduates/cs_cs_2012_13.html"&gt;program requirements&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Either&lt;br/&gt;
CP4101 BComp Dissertation&lt;br/&gt;
or&lt;br/&gt;
Complete 12 MCs by taking CS modules at level-4000 or above, or modules approved by the Department of Computer Science&lt;br/&gt;
or&lt;br/&gt;
12 MCs of Industrial Experience Training.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;strong&gt;IS/EC&lt;/strong&gt; students, they can map IS4010 Industry Internship Programme (equivalent to 12-MC FYP or 3 IS modules) to NOC (TR3101 and TR3102). The other TR module confirmed is TR2202 Technological Innovation. (Thanks Jason for this!)&lt;/p&gt;
&lt;p&gt;Check the requirements for your cohort to be sure.&lt;/p&gt;
&lt;p&gt;Recall that the breakdown of ULR is
- 8 MCs on GEM
- 4 MCs on SS
- 8 MCs on Breadth&lt;/p&gt;
&lt;p&gt;so &lt;code&gt;TR3103&lt;/code&gt; essentially completes my ULR requirement.&lt;/p&gt;
&lt;p&gt;The remaining 3 modules (&lt;code&gt;TR3002&lt;/code&gt;, &lt;code&gt;MG2304&lt;/code&gt;, &lt;code&gt;TRXXXX&lt;/code&gt;) maps to my UE, which has a cap of 20 MCs. This means that for you to be MC neutral, you should not have taken more than 2 UEs thus far.&lt;/p&gt;
&lt;h2&gt;What about the 8 MCs left?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;40 - 32 = 8MCs&lt;/code&gt;, so at the end of NOC I would have 8 MCs I need to clear.&lt;/p&gt;
&lt;p&gt;In my case, I haven't taken a single UE yet, so this 8 MCs will be used on UEs. I took Orbtial (a summer module) in Year 1, so that clears 4 MCs. I plan to overload 1 module in my final year, so that I can make 160 MCs and graduate in 4 years.&lt;/p&gt;
&lt;h2&gt;Need more info?&lt;/h2&gt;
&lt;p&gt;Shoot me a question ngzhian@nus.edu.sg&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; this means to not take more modules than necessary&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;#&lt;/sup&gt; reasons are not easy to explain, and this might change for your batch&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;?&lt;/sup&gt; module not confirmed but can definitely map it to UE&lt;/p&gt;</summary><category term="noc"></category><category term="nus"></category><category term="soc"></category></entry><entry><title>Suggest - My Hack for TimeIncHack2014</title><link href="http://ngzhian.com/blog/time-inc-hack-2014.html" rel="alternate"></link><updated>2014-11-20T08:00:00-05:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2014-11-20:blog/time-inc-hack-2014.html</id><summary type="html">&lt;p&gt;Over the weekend of 15-16 Nov, I took part in TimeIncHack2014, organized by Time Inc. The theme was about getting millenials to consume content, but I took off on a tangent right after hearing the problem description by the organizers: instead of building applications or services that media consumers will use, I was interested in making an internal tool for content creators to write articles that are more relevant.&lt;/p&gt;
&lt;p&gt;Born out of around 20 hours of hacking (18 of which was while standing), I built &lt;a href="http://128.199.204.208/"&gt;Suggest&lt;/a&gt;, a tool that analyzes what has been written so far and tries to grab articles that are relevant.&lt;/p&gt;
&lt;p&gt;It begins with a simple textarea where you can type (or just copy and paste an article to test it out) into.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple textarea for your content" src="http://i.imgur.com/JH2FObx.png?1" /&gt;&lt;/p&gt;
&lt;p&gt;It will perform entity recognition on the content, grabbing &lt;em&gt;Nouns&lt;/em&gt;, such as people, organizations, places, and list them at the bottom.&lt;/p&gt;
&lt;p&gt;&lt;img alt="live entity recognition" src="http://i.imgur.com/lctBs56.png?1" /&gt;&lt;/p&gt;
&lt;p&gt;When you press the &lt;code&gt;Suggest&lt;/code&gt; button, it will perform a keyword analysis on your content, pull from new sources other articles that are relevant based on the keywords, and show them by the side, under the &lt;code&gt;Relevant&lt;/code&gt; tab.&lt;/p&gt;
&lt;p&gt;&lt;img alt="related articles" src="http://i.imgur.com/FGlk8Vo.png?1" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Tag&lt;/code&gt; tab suggests articles from Time Inc that are tagged under the same category as what Suggest thinks the current content should be under.&lt;/p&gt;
&lt;p&gt;&lt;img alt="tags" src="http://i.imgur.com/gjaboQT.png?1" /&gt;&lt;/p&gt;
&lt;p&gt;All of the hard work (keyword analysis and entity extraction) is powered by &lt;a href="http://www.alchemyapi.com/"&gt;AlchemyAPI&lt;/a&gt;, which has a super simple way (and easy to use python sdk) to do all these. Thanks to them for the wonderful work and increasing my API calls limit for the hackathon! The articles are pulled from &lt;a href="http://developer.nytimes.com/"&gt;New York Times&lt;/a&gt;, who have a superb restful developers endpoint, and also &lt;a href="http://time.com/"&gt;Time Inc&lt;/a&gt;, lovely organizers of this hackathon.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/ngzhian/suggest"&gt;open source&lt;/a&gt;, feel free to check it out and throw suggestions at me. For the code to run you basically need to register with AlchemyAPI and New York Times for api keys - which is a super simple process.&lt;/p&gt;</summary></entry></feed>