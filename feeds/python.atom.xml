<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Zhi An</title><link href="http://ngzhian.com/blog/" rel="alternate"></link><link href="http://ngzhian.com/blog/feeds/python.atom.xml" rel="self"></link><id>http://ngzhian.com/blog/</id><updated>2015-01-18T18:00:00-05:00</updated><entry><title>So I set up a Jenkins CI server today</title><link href="http://ngzhian.com/blog/so-i-set-up-a-jenkins-ci-server-today.html" rel="alternate"></link><updated>2015-01-18T18:00:00-05:00</updated><author><name>Ng Zhi An</name></author><id>tag:ngzhian.com,2015-01-18:blog/so-i-set-up-a-jenkins-ci-server-today.html</id><summary type="html">&lt;p&gt;So I set up a local Jenkins CI server today that checks a local Git repository containing a Django project for any changes, runs tests, and reports coverage.&lt;/p&gt;
&lt;h1&gt;Tests? Wut?&lt;/h1&gt;
&lt;p&gt;There are many reasons to run test, and there are also many excuses not to run.
For me it is because I forget, and am too eager to push code.&lt;/p&gt;
&lt;p&gt;So how did I solve this? By setting up a local Jenkins CI server.&lt;/p&gt;
&lt;h1&gt;What is Jenkins? (to me)&lt;/h1&gt;
&lt;p&gt;To me Jenkins is a way to build my project and run tests easily, because it doesn't require any interaction from me (beyond setting it up). This leaves me with &lt;strong&gt;no&lt;/strong&gt; excuse not to run my tests.
My goal was to set up Jenkins such that everytime a commit is made to my working Git repository, my tests will run.
If you're wondering what CI is... &lt;a href="http://www.martinfowler.com/articles/continuousIntegration.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Installing Jenkins&lt;/h1&gt;
&lt;p&gt;I had a lot of help setting this up, refer to the bottom for a list. Here I'm just going to list the steps I went through and point out the challenges.&lt;/p&gt;
&lt;p&gt;First, I develop in a Vagrant box running Ubuntu. Jenkins has a Ubuntu package that makes installation simple, and they actually have &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu"&gt;instructions there&lt;/a&gt;. Basically it involves adding a new apt source and then installing Jenkins from there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
sudo sh -c &lt;span class="s1"&gt;&amp;#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;#39;&lt;/span&gt;
sudo apt-get update
sudo apt-get install jenkins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you can navigate to localhost:8080 on your browser to see Jenkin's web interface.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Since I develop in a Vagrant box, to access the Jenkins web interface I had to forward the ports. Jenkins listens on localhost:8080, so in my Vagrant file forwards 8080 (guest) to 8081 (host), and I can access Jenkins from my host at localhost:8081&lt;/p&gt;
&lt;h1&gt;Installing Plugins&lt;/h1&gt;
&lt;p&gt;My project resides in a Git repository, and Jenkins doesn't offer Git support out of the box. There's a plugin to help though. Detailed plugin instructions are &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to Jenkins interface &amp;gt; manage jenkins &amp;gt; manage plugins, and install Git Plugin. After installing, you can configure your job. Here are the settings I use:
- Repository URL is a path passed to &lt;code&gt;git clone&lt;/code&gt;, and my project is mounted onto &lt;code&gt;/vagrant&lt;/code&gt;
- Shallow clone, I don't need the full history of the repository, so this should make things speedier&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git configuration" src="http://ngzhian.com/blog/images/jenkins-git.png" /&gt;&lt;/p&gt;
&lt;p&gt;The setup for the Git means that your local git repo will be cloned down to Jenkin's &lt;em&gt;workspace&lt;/em&gt; before each build. A workspace is the directory Jenkins is processing the build in, and for me it is &lt;code&gt;/var/lib/jenkins/jobs/project/workspace&lt;/code&gt; where project is the name of the Jenkin's job. More information on the folder structure used by Jenkins can be found &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;The first build!&lt;/h1&gt;
&lt;p&gt;Next up we need to actually run the tests. This can be configured in the &lt;em&gt;Build&lt;/em&gt; section further down the page. Before Jenkins, how I was running my tests was just a shellscript, which is a simple wrapper around &lt;code&gt;manage.py test&lt;/code&gt; to pass in the right parameters. So for Jenkins, all I needed to do was to call the shell script.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="http://ngzhian.com/blog/images/jenkins-build.png" /&gt;&lt;/p&gt;
&lt;p&gt;Click Build Now, and then navigate to the console output to enjoy your success! I hope. That's your first Jenkin's build :)&lt;/p&gt;
&lt;h1&gt;Report coverage with Cobertura&lt;/h1&gt;
&lt;p&gt;I use &lt;code&gt;coverage.py&lt;/code&gt; to generate reports for my tests, and it also has &lt;a href="http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting"&gt;the ability&lt;/a&gt; to generate XML file that Cobertura can regonize.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cobertura" src="http://ngzhian.com/blog/images/jenkins-cobertura.png" /&gt;&lt;/p&gt;
&lt;p&gt;So again install Cobertura, and set it up by pointing it to the name of your coverage file. After this, click Build Now and you should be able to view the report from your build's status page.&lt;/p&gt;
&lt;h1&gt;Automate!&lt;/h1&gt;
&lt;p&gt;The final step is to set it up such that any changes you make (commit) will cause a build. We can do this is to set up a Build Trigger to Poll SCM (Git), on a 5 min schedule. So every 5 minutes, if Jenkins detects a change to the Git repository, it will run a new build.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build Triggers" src="http://ngzhian.com/blog/images/jenkins-build-trigger.png" /&gt;&lt;/p&gt;
&lt;p&gt;setup a local jenkins&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu"&gt;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/kmmbvnr/home/django-jenkins-tutorial"&gt;https://sites.google.com/site/kmmbvnr/home/django-jenkins-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting"&gt;http://nedbatchelder.com/code/coverage/cmd.html#h_xml_reporting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="jenkins"></category><category term="tests"></category></entry></feed>