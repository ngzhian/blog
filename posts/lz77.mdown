---
title: LZ77
date: 2018-06-26 21:00
...

LZ77 is a compression algorithm by Abramham Lampel and Jacob Ziv published in a paper in 1977 ([pdf](http://www.nemenmanlab.org/~ilya/images/e/e9/Ziv-lempel-77.pdf)).
It is the basis of many algorithms used in places like PNG and ZIP. I thought it would be interesting to see how it works.

The paper is only 6 pages long, and packed with mathematics I don't fully understand. This will be about the compression and decompression algorithms described in the paper, without much mention of the mathematics and analysis.

*I will try to explain things in simpler terms. To be consistent with the paper and make it easier to follow, I will refer to notations in the paper using italics.*

At a high level, the algorithm performs two steps:

1. Parse a *source*, $S$, into *words*
2. Map *words* into *codewords* using a *coding scheme*

*The source is a string of symbols from a finite alphabet, $A$, of cardinality $\alpha$.
Words are of at most $L_s$ length.
The codewords are of fixed length $L_c$, over the same $A$*

The parsing step is done by filling a buffer, or *window*, of size $n$, with symbols, and finding a *reproducible extension*.

To figure out what a *reproducible extension* is, let's look at an example string. Let

- $S = 00101011$,
- $len(S)$ is the length of $S$, so $len(S) = 8$

$S(i,j)$ is a substring of $S$ starting from position $i$ until position $j$ (inclusive). As a shortcut $S(i) = S(i,i)$.

<!-- ``` -->
<!-- S = 00101011 -->
<!--       ^ ^ -->
<!--     S(3,5) is a substring -->
<!-- ``` -->

A *prefix* of $S$ is a substring starting from position $1$ until position $j$, where $j < len(S)$.
For example, $S(1,5) = 00101$ is a prefix of $S$, and $S$ is not a prefix of itself.

<!-- ``` -->
<!-- S = 00101011 -->
<!--     ^   ^ -->
<!--   S(1,  5) is a prefix -->
<!-- ``` -->

An *extension* of the prefix $S(1,j)$ into $S$ is:

- a substring $S(j+1, k)$, (where $j+1 \leq k \leq len(S)$),
- which matches some other substring $S(p, q)$ that begins before or at $j$ ($p \leq j$)
- and since these substrings must be the same length, $q = p + k - j$

In our example, with $j = 3$, the extensions of $S(1,j)$ into $S$ (which must begin at $j + 1 = 4$) are:

- $S(4,4) = 0$, matches $S(1,1)$
- $S(4,5) = 01$, matches $S(2,3)$
- $S(4,6) = 010$, matches $S(2,4)$
- $S(4,7) = 0101$, matches $S(2,5)$

The *reproducible extension* is the longest of these extensions, which is $S(4,7)$, since $len(S(4,7)) = 4$, and the match is $S(2,5)$.

And the *pointer of reproduction*, denoted $p$, is where the matched substring begins, which is $2$.

With this, we can now dive deeper into the encoding algorithm:

1. Begin with a string of $n - L_s$ zeroes, followed the first $L_s$ symbols from the source, call this $B_1$
2. Find the reproducible extension of the prefix $B_1(1, n-L_s)$ into $B_1(1,n-1)$, with length $l_1 - 1$ and $p_1$ as the pointer of reproduction
3. Set the source word, $S_1$, to be the reproducible extension, with 1 more symbol added to the end, i.e. $S_1 = B_1(n-L_s+1,n-L_s+l_1)$, thus $len(S_1) = l_1 - 1$
4. Convert source word into codeword (details described later)
5. Update the contents of the buffer by shifting out the first $l_1$ symbols, and adding the next $l_1$ symbols from the source
6. Repeat

An example to help illustrate these steps (underscores don't mean anything and serves as reading guide):

- Given:
    - $S = 001010210210212021021200...$
    - $L_s = 9$
    - $n = 18$

1. $B_1 = 000000000\_001010210$, 9 zeros and the first 9 symbols of $S$
2. The reproducible extension of $B_1(1, 9)$ into $B_1(1,17)$, is $B_1(10,11) = 00$, with length 2, thus $l_1 = 3$. $p_1$ can be anywhere from $0$ to $9$, let's pick $p_1 = 9$
3. The source word $S_1$ is $B_1(n - L_s + 1, n - L_s + l_i) = B_1(10, 12) = 001$
4. The code word $C_1 = 22\_02\_1$, calculate like so:
    - it is made up of three parts, $C_i = C_{i1}C_{i2}C_{i3}$
    - $C_{i1}$ is $p_i - 1$ in base-$\alpha$, which is $(9-1)_3 = 22$, of length $\lceil \log(n - L_s)\rceil$
    - $C_{i2}$ is $l_i - 1$ in base-$\alpha$, which is $(3-1)_3 = 02$, of length $\lceil \log(L_s)\rceil$
    - $C_{i3}$ is the last symbol of the source word, which is $1$
5. Shift the first $3$ symbols from the buffer, to get $000000001010210$, and add the next $3$ symbols from $S$, to get $B_2 = 000000\_001010210\_210$
6. Repeat
    - $B_2 = 000000001\_010210210$, reproducible extension of $B_2(1,9)$ into $B_2(1,17)$ is $B(10,12)$ of length 3, $l_2=4$, $p = 8$, $C_2 = 21102$
    - $B_3 = 000010102\_102102120$, reproducible extension of $B_3(1,9)$ into $B_3(1,17)$ is $B(10,16)$ of length 7, $l_3=8$, $p = 7$, $C_3 = 20212$
    - $B_4 = 210210212\_021021200$, reproducible extension of $B_4(1,9)$ into $B_4(1,17)$ is $B(10,17)$ of length 8, $l_4=9$, $p = 3$, $C_4 = 02220$


Decompression is doing these steps in reverse:

1. Given the codeword $C = 2202121102...$ (determined above)
2. Load the initial decoding buffer $D_1$ of length $n - L_s$ with zeroes, so $D_1 = 000000000$
3. Decode code word into $p_1$ and $l_1$ and last symbol of $S_1$
4. Shift buffer left by $l_1$ times, each time adding $D_1(p_1)$ to the end of buffer, except the last shift, which adds the last symbol of $S_1$
5. The last $l_1$ symbols will be $S_1$

Decoding our code words from the example above:

1. $C_1 = 22021$
2. $D_1 = 000000000$
3. $p_1 = 9$, $l_1 = 3$, and the last symbol is $1$
4. shift and add to buffer
    - shift left once, and add $D_1(9)$, $000000000 \rightarrow 000000000$
    - shift left once, and add $D_1(9)$, $000000000 \rightarrow 000000000$
    - shift left once, and add last symbol, $000000000 \rightarrow 000000001$
5. the last $3$ symbols, $S_1$ is $001$

The second code word:

1. $C_2 = 21102$
2. $D_2 = 000000001$
3. $p_2 = 8$, $l_2 = 4$, last symbol is $2$
4. shift and add to buffer
    - shift left once, and add $D_2(8)$, $000000001 \rightarrow 000000010$
    - shift left once, and add $D_2(8)$, $000000010 \rightarrow 000000100$
    - shift left once, and add $D_2(8)$, $000000100 \rightarrow 000001001$
    - shift left once, and add last symbol, $000001001 \rightarrow 000010102$
5. the last $4$ symbols $S_2$ is $0102$

The third code word:

1. $C_3 = 20212$
2. $D_3 = 000010102$
3.  $p_3 = 7$, $l_3 = 8$, last symbol is $2$
4. shift and add to buffer
    - shift left once, and add $D_2(7)$, $000010102 \rightarrow 000101021$
    - shift left once, and add $D_2(7)$, $000101021 \rightarrow 001010210$
    - shift left once, and add $D_2(7)$, $001010210 \rightarrow 010102102$
    - shift left once, and add $D_2(7)$, $010102102 \rightarrow 101021021$
    - shift left once, and add $D_2(7)$, $101021021 \rightarrow 010210210$
    - shift left once, and add $D_2(7)$, $010210210 \rightarrow 102102102$
    - shift left once, and add $D_2(7)$, $102102102 \rightarrow 021021021$
    - shift left once, and add last symbol, $021021021 \rightarrow 210210212$
5. the last $8$ symbols $10210212$ is $S_3$

The last code word:

1. $C_4 = 02220$
2. $D_4 = 210210212$
3. $p_4 = 3$, $l_3 = 9$, last symbol is $0$
4. shift and add to buffer
    - shift left once, and add $D_2(7)$, $210210212 \rightarrow 102102120$
    - shift left once, and add $D_2(7)$, $102102120 \rightarrow 021021202$
    - shift left once, and add $D_2(7)$, $021021202 \rightarrow 210212021$
    - shift left once, and add $D_2(7)$, $210212021 \rightarrow 102120210$
    - shift left once, and add $D_2(7)$, $102120210 \rightarrow 021202102$
    - shift left once, and add $D_2(7)$, $021202102 \rightarrow 212021021$
    - shift left once, and add $D_2(7)$, $212021021 \rightarrow 120210212$
    - shift left once, and add $D_2(7)$, $120210212 \rightarrow 202102120$
    - shift left once, and add last symbol, $202102120 \rightarrow 021021200$
5. the last $9$ symbols $021021200$ is $S_4$

<!--
D_i(n - L_s - l_{i-1} + 1, n - L_s) = D_i(9 - 3 + 1, 9) = D_i(7, 9)

$S_1 = 001

    The reproducible extension beginning at position 10 is $S(10,11) = 00$, set the first source word to $S(10,11+1) = 001$, let the length be $l$, and set the pointer to 9 (it could be anything form 1 to 9)
beginning at the position where the (non-zero) symbols start, this is the source word that is parsed.
    The codeword is made up of three parts:
    1. radix-$\alpha$ representation of $p-1$, so 22
    2. radix-$\alpha$ representation of $l - 1$, so 02
    3. last symbol of source word, so 1
    Shift out the first $l$ symbols from the buffer, then append the next $l$ symbols from the source

Test 

1. Parse a string of symbols from a finite alphabet *A*, of cardinality *alpha*, into substrings (words) of at most *L_s* length
2. Use a *coding scheme* to map these substrings into uniquely decipherable codewords of fixed length *L_c* over the same *A*

The formula that relates *L_s*, *n*, and *L_c* is:
where *n* is the length of the buffer used at the encoding end, also known as the *window*.

We need some definitions to help illustrate the algorithm:

- alphabet `A = {0, 1}` *alpha* is 2, the word `S = 00101011` has length 8, `l(S) = 8`
- a substring of S from position *i* to *j* is `S(i,j)`, thus `S(1,4) = 0010`
- when `i > j`, `S(i,j) = null`, where null is the empty word
- given strings *Q* and *R*, a new string `S = QR`, the concatenation of *Q* and *R*
- naturally, `l(S) = l(Q) + l(R)`, and `S(1,l(Q)) = Q` and `S(l(Q)+1, l(Q) + l(R)) = R`
- for each `0 <= j <= l(S)`, `S(i,j)` is a prefix of S, `0`, `00`, `00101011` are all prefixes of S
- if `j < l(S)`, `S(i,j)` is a *proper prefix*, `0` and `00` are proper prefixes of S, `00101011` is not
- given a proper prefix `S(1,j)`, and `i` such that `i <= j`, `L(i)` is the largest non-negative integer `l <= l(S) - j` such that `S(i,i+l-1) = S(j+1,j+l)`

```
  +-- j = 3
  V
00101011
^^^
|||
||+- if i = 3, L(i) = 0
|+-- if i = 2, L(i) = 4
+--- if i = 1, L(i) = 1
```

- starting from any `i <= j`, what is the longest shared word with the word starting at position *j*
- the position where `L(j)` is maximized is denoted *p*, in the example this is 2
- `S(j+1,j+L(p))` is called the *reproducible extension* of `S(1,j)` into *S*, and *p* is the *pointer* of the reproduction
- `S(3+1,3+4) = 0101` is the reproducible extension of `S(1,3) = 001` into S with pointer `p = 2`

```
 +----- p = 2
 ||---- j = 3
 VV
00101011
   \  /
    \/
    reproducible extension of S(1,j) into S
```

The encoding then proceeds in four steps:

1. Initially, set `B_1 = 0^{n-L_s}S(1,L_s)`, a string of `n-L_s` zeroes, followed by the first `L_s` symbols of `S`
2. Set `S_i`, the *i*-th source word to `S_i = B_i(n-L_s+1,n-L_s+l_i)`, the prefix of `B_i` starting at the first symbol of `S`, of length `l_i`,
where `l_i - 1` is the length of the prefix of `S_i` which is the reproducible extension of `B_i(1,n-L_s)` into `B_i(1,n-1)`
3. If `p_i` is the pointer of reproduction in step 2, the codeword `C_i` for `S_i` is:""
4. Shift out the first `l_i` positions of the buffer, and append the next `l_i` symbols from S

An example will help:

1. Given `S = 001010210210212021021200...`, `L_s = 9`, `n = 18` (arbitrarily chosen)`
2. Thus `L_c = 5`
3. The initial buffer has 9 zeroes followed by the first 9 symbols of S, `000000000001010210`
4. Find the reproducible extension of starting at position `L_s + 1`, in this case it is `S(10,11) = 00`, so `S_1 = 001` and `l_i = 3`
5. Calculate code word
6. Shift by 3, and add next 3 symbols of S, to get `000000001010210210`






 -->
